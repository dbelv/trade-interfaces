// @generated by protoc-gen-es v1.2.1 with parameter "target=ts,import_extension=none"
// @generated from file auth.proto (package quay, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * * Nonce response message containing the generated `nonce` string. 
 *
 * @generated from message quay.NonceText
 */
export class NonceText extends Message<NonceText> {
  /**
   * @generated from field: string nonce = 1;
   */
  nonce = "";

  constructor(data?: PartialMessage<NonceText>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quay.NonceText";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "nonce", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NonceText {
    return new NonceText().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NonceText {
    return new NonceText().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NonceText {
    return new NonceText().fromJsonString(jsonString, options);
  }

  static equals(a: NonceText | PlainMessage<NonceText> | undefined, b: NonceText | PlainMessage<NonceText> | undefined): boolean {
    return proto3.util.equals(NonceText, a, b);
  }
}

/**
 * * Verify request message containing an JSON encoded string of the `SignedMessage` structure (src/auth). 
 *
 * @generated from message quay.VerifyText
 */
export class VerifyText extends Message<VerifyText> {
  /**
   * @generated from field: string body = 1;
   */
  body = "";

  constructor(data?: PartialMessage<VerifyText>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quay.VerifyText";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VerifyText {
    return new VerifyText().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VerifyText {
    return new VerifyText().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VerifyText {
    return new VerifyText().fromJsonString(jsonString, options);
  }

  static equals(a: VerifyText | PlainMessage<VerifyText> | undefined, b: VerifyText | PlainMessage<VerifyText> | undefined): boolean {
    return proto3.util.equals(VerifyText, a, b);
  }
}

/**
 * * The empty message 
 *
 * @generated from message quay.Empty
 */
export class Empty extends Message<Empty> {
  constructor(data?: PartialMessage<Empty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quay.Empty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Empty {
    return new Empty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Empty {
    return new Empty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Empty {
    return new Empty().fromJsonString(jsonString, options);
  }

  static equals(a: Empty | PlainMessage<Empty> | undefined, b: Empty | PlainMessage<Empty> | undefined): boolean {
    return proto3.util.equals(Empty, a, b);
  }
}

