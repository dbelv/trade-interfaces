syntax = "proto3";

import "types.proto";
import "seaport.proto";

package quay;

// This set of protobuf definitions define the request for quote (RFQ) service and related message formats.

service RFQ {
    // Request quotes from makers via a single QuoteRequest message and receive a stream of QuoteResponse messages for use by gRPC-web clients.
    rpc WebTaker (QuoteRequest) returns (stream QuoteResponse);
    // Request quotes from makers via a stream of QuoteRequest messages and receive a stream of QuoteResponse messages.
    rpc Taker (stream QuoteRequest) returns (stream QuoteResponse);
    // Send quotes to takers via a stream of QuoteResponse messages and receive a stream of QuoteRequest messages.
    rpc Maker (stream QuoteResponse) returns (stream QuoteRequest);
}

// The Action enum specifies whether the taker is requesting a quote to buy or sell an asset.
enum Action {
    BUY = 0;
    SELL = 1;
}

// The fields comprising the quote request message give the maker what they need to provide a quote/signed offer.
message QuoteRequest {
    // Ideally the maker would never know who the taker is, and vice-versa.
    // However, seaport reveals the makers' address to the taker. traderAddress
    // Ensures there is no information asymmetry between the maker and taker.
    // Thought the trader may not always end up being the taker
    H128 ulid = 1;                 // Optional
    H160 takerAddress = 2;         // Optional
    ItemType itemType = 3;
    H160 tokenAddress = 4;         // Optional
    H256 identifierOrCriteria = 5; // Optional
    H256 startAmount = 6;
    H256 endAmount = 7;
    Action action = 8;
}

// The quote response message contains the quote/signed offer from the maker.
message QuoteResponse {
    H128 ulid = 1;          // Optional
    H160 makerAddress = 2;  // Optional
    Order order = 3;
}